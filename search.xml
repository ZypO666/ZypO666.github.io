<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2023/04/07/ZypO3/"/>
      <url>/2023/04/07/ZypO3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="这是我的第三篇文章"><a href="#这是我的第三篇文章" class="headerlink" title="这是我的第三篇文章"></a>这是我的第三篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>🌄 JavaScript 的三座大山</title>
      <link href="/2023/04/07/ZypO2/"/>
      <url>/2023/04/07/ZypO2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>js 作为前端的中坚力量。那么 javascript 三座大山，你知道是哪些呢？</p><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>指代码当前上下文，控制着变量和函数的可见性和生命周期。最大的作用是隔离变量，不同作用域下同名变量不会冲突。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>指如果在当前作用域中没有查到值，就会向上级作用域查询，直到全局作用域，这样一个查找过程所形成的链条就被称之为作用域链。<br>作用域可以堆叠成层次结构，子作用域可以访问父作用域，反之则不行。<br>作用域具体可细分为四种：全局作用域、模块作用域、函数作用域、块级作用域</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>代码在程序的任何地方都能被访问，例如 window 对象。但全局变量会污染全局命名空间，容易引起命名冲突。</p><h4 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h4><p>早期 js 语法中没有模块的定义，因为最初的脚本小而简单。后来随着脚本越来越复杂，就出现了模块化方案（AMD、CommonJS、UMD、ES6 模块等）。通常一个模块就是一个文件或者一段脚本，而这个模块拥有自己独立的作用域。</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>顾名思义由函数创建的作用域。闭包就是在该作用域下产生，后面我们会单独介绍。</p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>由于 js 变量提升存在变量覆盖、变量污染等设计缺陷，所以 ES6 引入了块级作用域关键字来解决这些问题。典型的案例就是 let 的 for 循环和 var 的 for 循环。</p><p>了解完作用域再来谈谈 闭包： 函数 A 里包含了函数 B，而函数 B 使用了函数 A 的变量，那么函数 B 被称为闭包或者闭包就是能够读取函数 A 内部变量的函数。<br>可以看出闭包是函数作用域下的产物，闭包会随着外层函数的执行而被同时创建，它是一个函数以及其捆绑的周边环境状态的引用的组合。换而言之，闭包是内层函数对外层函数变量的不释放。</p><h3 id="闭包的特征"><a href="#闭包的特征" class="headerlink" title="闭包的特征"></a>闭包的特征</h3><h4 id="函数中存在函数"><a href="#函数中存在函数" class="headerlink" title="函数中存在函数"></a>函数中存在函数</h4><h4 id="内部函数可以访问外层函数的作用域"><a href="#内部函数可以访问外层函数的作用域" class="headerlink" title="内部函数可以访问外层函数的作用域"></a>内部函数可以访问外层函数的作用域</h4><h4 id="参数和变量不会被-GC，始终驻留在内存中"><a href="#参数和变量不会被-GC，始终驻留在内存中" class="headerlink" title="参数和变量不会被 GC，始终驻留在内存中"></a>参数和变量不会被 GC，始终驻留在内存中</h4><h4 id="有内存地方才有闭包"><a href="#有内存地方才有闭包" class="headerlink" title="有内存地方才有闭包"></a>有内存地方才有闭包</h4><p>所以使用闭包会消耗内存、不正当使用会造成内存溢出的问题，在退出函数之前，需要将不使用的局部变量全部删除。如果不是某些特定需求，在函数中创建函数是不明智的，闭包在处理速度和内存消耗方面对脚本性能具有负面影响。</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>有对象的地方就有 原型，每个对象都会在其内部初始化一个属性，就是 prototype(原型)，原型中存储共享的属性和方法。当我们访问一个对象的属性时，js 引擎会先看当前对象中是否有这个属性，如果没有的就会查找他的 prototype 对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。这么一个寻找的过程就形成了 原型链 的概念。</p><p>理解原型最关键的是理清楚<strong>proto</strong>、prototype、constructor 三者的关系，我们先看看几个概念：</p><p><strong>proto</strong>属性在所有对象中都存在，指向其构造函数的 prototype 对象；prototype 对象只存在（构造）函数中，用于存储共享属性和方法；constructor 属性只存在于（构造）函数的 prototype 中，指向（构造）函数本身。<br>一个对象或者构造函数中的隐式原型<strong>proto</strong>的属性值指向其构造函数的显式原型 prototype 属性值，关系表示为：instance.<strong>proto</strong> === instance.constructor.prototype<br>除了 Object，所有对象或构造函数的 prototype 均继承自 Object.prototype，原型链的顶层指向 null：Object.prototype.<strong>proto</strong> === null<br>Object.prototype 中也有 constructor：Object.prototype.constructor === Object<br>构造函数创建的对象（Object、Function、Array、普通对象等）都是 Function 的实例，它们的 <strong>proto</strong> 均指向 Function.prototype。</p><h2 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h2><p>JavaScript 是 单线程 语言，意味着只有单独的一个调用栈，同一时间只能处理一个任务或一段代码。队列、堆、栈、事件循环构成了 js 的并发模型，事件循环 是 JavaScript 的执行机制。<br>为什么 js 是一门单线程语言呢？最初设计 JS 是用来在浏览器验证表单以及操控 DOM 元素，为了避免同一时间对同一个 DOM 元素进行操作从而导致不可预知的问题，JavaScript 从一诞生就是单线程。<br>既然是单线程也就意味着不存在异步，只能自上而下执行，如果代码阻塞只能一直等下去，这样导致很差的用户体验，所以事件循环的出现让 js 拥有异步的能力。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>v-for比v-if优先级更高？面试官:回去等通知吧</title>
      <link href="/2023/04/06/ZypO/"/>
      <url>/2023/04/06/ZypO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h3 id="大家好，我叫-JetTsang，之前都是在掘金潜水来着，现在偶尔做一些内容输出吧。"><a href="#大家好，我叫-JetTsang，之前都是在掘金潜水来着，现在偶尔做一些内容输出吧。" class="headerlink" title="大家好，我叫 JetTsang，之前都是在掘金潜水来着，现在偶尔做一些内容输出吧。"></a>大家好，我叫 JetTsang，之前都是在掘金潜水来着，现在偶尔做一些内容输出吧。</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>v-if 和 v-for 哪个优先级更高呢？这是面试官常常问到的一个问题，如果是在三年前，我会毫不犹豫的回答当然是 v-for 哩，但在 3202 的今天，如果还这么答，显然是低估了前端技术的日新月异啰。下面我们就来结合编译结果，一探究竟吧。<br>注意了 ⚠️，以上问题一般指的是 v-for 和 v-if 连用的情况，比如</p><p><code>&lt;div v-for=&#39;item in itemList&#39; v-if=&#39;item.id === 1&#39; &gt;&#123;&#123;item.name&#125;&#125;&lt;/div&gt;</code></p><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><p>我们都知道，这个 v-if 是条件渲染，v-for 是列表渲染，都是模版语法，叫这名字当然是因为它们只能在 Vue 的模版当中用啦。</p><p>这些模版语法不是 Javascript 原生的，因此需要经过一个编译的过程，将它们转为 render 函数。<br>经历 render 函数–&gt;虚拟 DOM–&gt;真实 DOM 这样的过程,呈现到页面当中。<br>因此，剖析这个问题的关键就是看编译成的 render 函数。<br>在此有请 Vue 官方设计的工具，可以让我们实时看到编译成的 render 函数。<br>.v2.template-explorer<br>.vue3-template-explorer</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>显然，在 V2 当中，v-for 的优先级更高，而在 V3 当中，则是 v-if 的优先级更高。在 V3 当中，做了 v-if 的提升优化，去除了没有必要的计算，但同时也会带来一个无法取到 v-for 当中遍历的 item 问题，这就需要开发者们采取其他灵活的方式去解决这种问题。<br>看到这里是不是对 vue 的编译有了更深刻的体会，原来 vue 在编译过程当中做了这么多细节的优化，是啊，一个好的产品就是需要不断的打磨呢。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
